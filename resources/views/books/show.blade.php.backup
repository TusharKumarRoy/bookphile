@extends('layouts.app')

@section('content')
<meta name="csrf-token" content="{{ csrf_token() }}">
<meta name="book-id" content="{{ $book->id }}">

<div class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 py-8">
        <!-- Breadcrumb -->
        <nav class="mb-8">
            <ol class="flex items-center space-x-2 text-sm text-gray-500">
                <li><a href="{{ route('books.index') }}" class="hover:text-blue-600">Books</a></li>
                <li><span class="mx-2">/</span></li>
                <li class="text-gray-900">{{ $book->title }}</li>
            </ol>
        </nav>
        
        <!-- Main Book Section -->
        <div class="bg-white rounded-lg shadow-sm overflow-hidden mb-8">
            <div class="md:flex">
                <!-- Book Cover and Actions -->
                <div class="md:w-1/3 lg:w-1/4 p-6">
                    <!-- Book Cover -->
                    <div class="aspect-[3/4] bg-gray-100 relative mb-6 rounded-lg overflow-hidden">
                        @if($book->cover_image)
                            <img src="{{ $book->cover_image }}" alt="{{ $book->title }}" class="w-full h-full object-cover">
                        @else
                            <div class="w-full h-full bg-gradient-to-br from-blue-400 to-purple-600 flex items-center justify-center">
                                <span class="text-white text-lg font-bold text-center px-4">{{ $book->title }}</span>
                            </div>
                        @endif
                    </div>
                    
                    @auth
                        <!-- Reading Status Dropdown -->
                        <div class="mb-4">
                            <div class="relative">
                                <select id="reading-status" class="w-full px-4 py-3 bg-green-600 text-white font-semibold rounded-lg appearance-none cursor-pointer hover:bg-green-700 transition-colors">
                                    @if(!isset($userInteractions['reading_status']) || !$userInteractions['reading_status'])
                                        <option value="">Want to Read</option>
                                    @endif
                                    <option value="want_to_read" {{ isset($userInteractions['reading_status']) && $userInteractions['reading_status']->status == 'want_to_read' ? 'selected' : '' }}>
                                        Want to Read
                                    </option>
                                    <option value="currently_reading" {{ isset($userInteractions['reading_status']) && $userInteractions['reading_status']->status == 'currently_reading' ? 'selected' : '' }}>
                                        Currently Reading
                                    </option>
                                    <option value="finished_reading" {{ isset($userInteractions['reading_status']) && $userInteractions['reading_status']->status == 'finished_reading' ? 'selected' : '' }}>
                                        Finished Reading
                                    </option>
                                </select>
                                <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Wishlist Button -->
                        <button id="wishlist-btn" class="w-full flex items-center justify-center px-4 py-3 border border-gray-300 text-gray-700 font-semibold rounded-lg hover:bg-gray-50 transition-colors mb-4 {{ isset($userInteractions['is_in_wishlist']) && $userInteractions['is_in_wishlist'] ? 'bg-red-50 border-red-300 text-red-700' : '' }}">
                            <svg id="wishlist-icon" class="w-5 h-5 mr-2 {{ isset($userInteractions['is_in_wishlist']) && $userInteractions['is_in_wishlist'] ? 'text-red-500' : 'text-gray-400' }}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="{{ isset($userInteractions['is_in_wishlist']) && $userInteractions['is_in_wishlist'] ? 'M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z' : 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z' }}"></path>
                            </svg>
                            <span id="wishlist-text">
                                {{ isset($userInteractions['is_in_wishlist']) && $userInteractions['is_in_wishlist'] ? 'In Wishlist' : 'Add to Wishlist' }}
                            </span>
                        </button>
                        
                        <!-- Your Rating -->
                        @if(isset($userInteractions['user_rating']) && $userInteractions['user_rating'])
                            <div class="text-center">
                                <p class="text-sm text-gray-600 mb-2">Your rating</p>
                                <div class="flex justify-center space-x-1 mb-4">
                                    @for($i = 1; $i <= 5; $i++)
                                        <svg class="w-6 h-6 {{ $userInteractions['user_rating']->rating >= $i ? 'text-yellow-400' : 'text-gray-300' }} fill-current" viewBox="0 0 20 20">
                                            <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/>
                                        </svg>
                                    @endfor
                                </div>
                                <p class="text-xs text-gray-500">{{ $userInteractions['user_rating']->rating }} stars</p>
                            </div>
                        @else
                            <div class="text-center">
                                <p class="text-sm text-gray-600 mb-4">You haven't rated this book yet</p>
                            </div>
                        @endif
                    @else
                        <a href="{{ route('login') }}" class="w-full block text-center px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors">
                            Login to Track This Book
                        </a>
                    @endauth
                    
                    @guest
                        <!-- Guest Users Message -->
                        <div class="text-center p-6 bg-gray-100 rounded-lg">
                            <h3 class="text-lg font-semibold text-gray-900 mb-2">Join Bookphile to interact with books</h3>
                            <p class="text-gray-600 mb-4">Rate books, write reviews, and manage your reading list</p>
                            <div class="space-x-3">
                                <a href="{{ route('login') }}" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">Sign In</a>
                                <a href="{{ route('register') }}" class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">Sign Up</a>
                            </div>
                        </div>
                    @endguest
                </div>
                
                <!-- Book Details -->
                <div class="md:w-2/3 lg:w-3/4 p-6">
                    <!-- Title and Author -->
                    <div class="mb-6">
                        <h1 class="text-3xl font-bold text-gray-900 mb-2">{{ $book->title }}</h1>
                        <p class="text-xl text-gray-600 mb-4">
                            by 
                            @foreach($book->authors as $index => $author)
                                <a href="{{ route('authors.show', $author) }}" class="text-blue-600 hover:text-blue-800">
                                    {{ $author->getFullNameAttribute() }}
                                </a>@if(!$loop->last), @endif
                            @endforeach
                        </p>
                        
                        <!-- Rating Display -->
                        <div class="flex items-center gap-2 mb-4">
                            <div class="flex text-yellow-400">
                                @for($i = 1; $i <= 5; $i++)
                                    @if($i <= floor($book->average_rating))
                                        <svg class="w-5 h-5 fill-current" viewBox="0 0 20 20">
                                            <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/>
                                        </svg>
                                    @else
                                        <svg class="w-5 h-5 text-gray-300 fill-current" viewBox="0 0 20 20">
                                            <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/>
                                        </svg>
                                    @endif
                                @endfor
                            </div>
                            <span class="text-lg font-semibold">{{ number_format($book->average_rating, 2) }}</span>
                            <span class="text-gray-500">{{ number_format($book->ratings_count) }} ratings • 5,073 reviews</span>
                        </div>
                        
                        <!-- Subtitle/Tagline -->
                        @if($book->subtitle)
                            <p class="text-lg text-gray-700 mb-4">{{ $book->subtitle }}</p>
                        @endif
                    </div>
                    
                    <!-- Book Info Grid -->
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8 p-4 bg-gray-50 rounded-lg">
                        @if($book->publication_year)
                            <div>
                                <dt class="text-sm font-medium text-gray-500">Published</dt>
                                <dd class="text-lg font-semibold text-gray-900">{{ $book->publication_year }}</dd>
                            </div>
                        @endif
                        
                        @if($book->page_count)
                            <div>
                                <dt class="text-sm font-medium text-gray-500">Pages</dt>
                                <dd class="text-lg font-semibold text-gray-900">{{ number_format($book->page_count) }}</dd>
                            </div>
                        @endif
                        
                        @if($book->isbn)
                            <div>
                                <dt class="text-sm font-medium text-gray-500">ISBN</dt>
                                <dd class="text-sm font-mono text-gray-900">{{ $book->isbn }}</dd>
                            </div>
                        @endif
                        
                        <div>
                            <dt class="text-sm font-medium text-gray-500">Genres</dt>
                            <dd class="flex flex-wrap gap-1 mt-1">
                                @foreach($book->genres as $genre)
                                    <a href="{{ route('genres.show', $genre) }}" class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full hover:bg-blue-200 transition-colors">
                                        {{ $genre->name }}
                                    </a>
                                @endforeach
                            </dd>
                        </div>
                    </div>
                    
                    <!-- Description -->
                    @if($book->description)
                        <div class="mb-8">
                            <p class="text-gray-700 leading-relaxed">{{ $book->description }}</p>
                            <button class="text-blue-600 hover:text-blue-800 text-sm mt-2">Show more</button>
                        </div>
                    @endif
                </div>
            </div>
        </div>
        
        <!-- About the Author -->
        @if($book->authors->count() > 0)
            @foreach($book->authors as $author)
                <div class="bg-white rounded-lg shadow-sm overflow-hidden mb-8">
                    <div class="p-6">
                        <h2 class="text-xl font-bold text-gray-900 mb-6">About the author</h2>
                        <div class="flex gap-6">
                            <!-- Author Photo -->
                            <div class="flex-shrink-0">
                                <div class="w-20 h-20 bg-gradient-to-br from-green-400 to-teal-600 rounded-full flex items-center justify-center text-white font-bold text-xl">
                                    {{ strtoupper(substr($author->first_name, 0, 1) . substr($author->last_name, 0, 1)) }}
                                </div>
                            </div>
                            
                            <!-- Author Info -->
                            <div class="flex-1">
                                <div class="flex items-center justify-between mb-4">
                                    <div>
                                        <h3 class="text-lg font-semibold text-gray-900">{{ $author->getFullNameAttribute() }}</h3>
                                        <p class="text-sm text-gray-600">{{ $author->books->count() }} books • 263 followers</p>
                                    </div>
                                    <button class="px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800 transition-colors">
                                        Follow
                                    </button>
                                </div>
                                
                                @if($author->biography)
                                    <p class="text-gray-700 leading-relaxed">
                                        {{ Str::limit($author->biography, 400) }}
                                        @if(strlen($author->biography) > 400)
                                            <button class="text-blue-600 hover:text-blue-800">...more</button>
                                        @endif
                                    </p>
                                @endif
                            </div>
                        </div>
                    </div>
                </div>
            @endforeach
        @endif
        
        <!-- Ratings & Reviews -->
        <div class="bg-white rounded-lg shadow-sm overflow-hidden mb-8">
            <div class="p-6">
                <h2 class="text-2xl font-bold text-gray-900 mb-6">Ratings & Reviews</h2>
                
                @auth
                    <!-- User Rating Section -->
                    <div class="border-b border-gray-200 pb-6 mb-6">
                        <div class="flex items-center justify-center mb-4">
                            <div class="w-16 h-16 bg-gray-300 rounded-full"></div>
                        </div>
                        <h3 class="text-lg font-semibold text-center mb-4">What do <em>you</em> think?</h3>
                        
                        <!-- User Rating Stars -->
                        <div class="flex justify-center space-x-1 mb-4" id="user-rating-large">
                            @for($i = 1; $i <= 5; $i++)
                                <button class="star-btn-large {{ isset($userInteractions['user_rating']) && $userInteractions['user_rating'] && $userInteractions['user_rating']->rating >= $i ? 'text-yellow-400' : 'text-gray-300' }} hover:text-yellow-400 transition-colors" data-rating="{{ $i }}">
                                    <svg class="w-8 h-8 fill-current" viewBox="0 0 20 20">
                                        <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/>
                                    </svg>
                                </button>
                            @endfor
                        </div>
                        
                        <div class="text-center mb-4">
                            <span class="text-sm text-gray-600" id="rating-status">
                                @if(isset($userInteractions['user_rating']) && $userInteractions['user_rating'])
                                    You rated this book {{ $userInteractions['user_rating']->rating }} star{{ $userInteractions['user_rating']->rating > 1 ? 's' : '' }}
                                @else
                                    Rate this book
                                @endif
                            </span>
                            @if(isset($userInteractions['user_rating']) && $userInteractions['user_rating'])
                                <button id="clear-rating-btn" class="ml-4 text-xs text-red-600 hover:text-red-800 underline">
                                    Clear rating
                                </button>
                            @endif
                        </div>
                        
                        <!-- Write/Edit Review Button -->
                        <div class="text-center mt-4">
                            <button id="write-review-btn" class="px-6 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800 transition-colors">
                                @if(isset($userInteractions['user_review']) && $userInteractions['user_review'])
                                    Edit Review
                                @else
                                    Write a Review
                                @endif
                            </button>
                        </div>

                        <!-- Existing Review Display -->
                        @if(isset($userInteractions['user_review']) && $userInteractions['user_review'])
                            <div id="existing-review" class="mt-6 p-4 bg-gray-50 rounded-lg">
                                <div class="flex justify-between items-start mb-2">
                                    <h4 class="font-semibold text-gray-900">Your Review</h4>
                                    <button id="delete-review-btn" class="text-xs text-red-600 hover:text-red-800 underline">
                                        Delete
                                    </button>
                                </div>
                                <p class="text-gray-700">{{ $userInteractions['user_review']->review_text }}</p>
                                <p class="text-xs text-gray-500 mt-2">
                                    Posted {{ $userInteractions['user_review']->created_at->diffForHumans() }}
                                    @if($userInteractions['user_review']->updated_at != $userInteractions['user_review']->created_at)
                                        • Edited {{ $userInteractions['user_review']->updated_at->diffForHumans() }}
                                    @endif
                                </p>
                            </div>
                        @endif
                        
                        <!-- Review Form (Hidden by default) -->
                        <div id="review-form" class="hidden mt-6">
                            <textarea id="review-textarea" class="w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" 
                                      rows="6" 
                                      placeholder="What did you think of this book? Share your thoughts...">{{ isset($userInteractions['user_review']) && $userInteractions['user_review'] ? $userInteractions['user_review']->review_text : '' }}</textarea>
                            <div class="flex justify-end gap-3 mt-4">
                                <button id="cancel-review-btn" class="px-4 py-2 text-gray-600 hover:text-gray-800">Cancel</button>
                                <button id="post-review-btn" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                                    @if(isset($userInteractions['user_review']) && $userInteractions['user_review'])
                                        Update Review
                                    @else
                                        Post Review
                                    @endif
                                </button>
                            </div>
                        </div>
                    </div>
                @endauth
                
                <!-- Friends & Following -->
                <div class="border-b border-gray-200 pb-6 mb-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Friends & Following</h3>
                    <div class="bg-gray-50 p-4 rounded-lg text-center">
                        <p class="text-gray-600">No one you know has read this book. <a href="#" class="text-blue-600 hover:text-blue-800">Recommend it to a friend!</a></p>
                    </div>
                </div>
                </div>
            </div>
        </div>
        
        <!-- Related Books -->
        @if($relatedBooks->count() > 0)
            <div class="mt-12">
                <h2 class="text-2xl font-bold text-gray-900 mb-6">You might also like</h2>
                <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
                    @foreach($relatedBooks as $relatedBook)
                        <a href="{{ route('books.show', $relatedBook) }}" class="group">
                            <div class="bg-white rounded-lg shadow-sm hover:shadow-lg transition-shadow duration-200 overflow-hidden">
                                <div class="aspect-[3/4] bg-gray-100 relative overflow-hidden">
                                    @if($relatedBook->cover_image)
                                        <img src="{{ $relatedBook->cover_image }}" alt="{{ $relatedBook->title }}" class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-200">
                                    @else
                                        <div class="w-full h-full bg-gradient-to-br from-blue-400 to-purple-600 flex items-center justify-center">
                                            <span class="text-white text-xs font-bold text-center px-2">{{ $relatedBook->title }}</span>
                                        </div>
                                    @endif
                                </div>
                                <div class="p-3">
                                    <h3 class="font-semibold text-gray-900 text-sm line-clamp-2 mb-1">{{ $relatedBook->title }}</h3>
                                    <p class="text-gray-600 text-xs">{{ number_format($relatedBook->average_rating, 1) }} ⭐</p>
                                </div>
                            </div>
                        </a>
                    @endforeach
                </div>
            </div>
        @endif
    </div>
</div>

<style>
    .star-filled {
        color: #fbbf24 !important;
    }
    
    .star-empty {
        color: #d1d5db !important;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    @auth
    // Setup CSRF token for AJAX requests
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    const bookId = document.querySelector('meta[name="book-id"]').getAttribute('content');
    
    console.log('Initializing with Book ID:', bookId);
    console.log('CSRF Token:', csrfToken ? 'Present' : 'Missing');
    
    // Initialize user rating from server
    let currentUserRating = {{ isset($userInteractions['user_rating']) && $userInteractions['user_rating'] ? $userInteractions['user_rating']->rating : 0 }};
    console.log('Initial user rating:', currentUserRating);
    
    // Test authentication first
    fetch(`/api/books/${bookId}/test-auth`, {
        method: 'GET',
        headers: {
            'X-CSRF-TOKEN': csrfToken,
            'Accept': 'application/json',
        },
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('✅ Authentication test passed:', data.message);
        } else {
            console.error('❌ Authentication test failed:', data);
        }
    })
    .catch(error => {
        console.error('❌ Authentication test error:', error);
    });
    
    // Helper function for AJAX requests
    function makeAjaxRequest(url, method = 'GET', data = null) {
        console.log(`Making ${method} request to: ${url}`);
        
        const options = {
            method: method,
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': csrfToken,
                'Accept': 'application/json',
            },
        };
        
        if (data) {
            options.body = JSON.stringify(data);
            console.log('Request data:', data);
        }
        
        return fetch(url, options)
            .then(response => {
                console.log(`Response status: ${response.status}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(responseData => {
                console.log('Response data:', responseData);
                return responseData;
            })
            .catch(error => {
                console.error('AJAX Error:', error);
                alert('Error: ' + error.message);
                return { success: false, message: error.message };
            });
    }
    
    // Reading Status Dropdown
    const readingStatusSelect = document.getElementById('reading-status');
    
    if (readingStatusSelect) {
        readingStatusSelect.addEventListener('change', function() {
            const status = this.value;
            if (!status) return;
            
            makeAjaxRequest(`/api/books/${bookId}/reading-status`, 'PUT', { status: status })
                .then(response => {
                    if (response.success) {
                        console.log('Reading status updated successfully');
                        // Update visual feedback
                        this.className = 'w-full px-4 py-3 font-semibold rounded-lg appearance-none cursor-pointer transition-colors text-white ' + 
                            (status === 'currently_reading' ? 'bg-orange-600 hover:bg-orange-700' : 
                             status === 'finished_reading' ? 'bg-blue-600 hover:bg-blue-700' : 
                             'bg-green-600 hover:bg-green-700');
                    }
                });
        });
    }
    
    // Wishlist Button
    const wishlistBtn = document.getElementById('wishlist-btn');
    const wishlistIcon = document.getElementById('wishlist-icon');
    const wishlistText = document.getElementById('wishlist-text');
    
    if (wishlistBtn && wishlistIcon && wishlistText) {
        wishlistBtn.addEventListener('click', function() {
            makeAjaxRequest(`/api/books/${bookId}/wishlist/toggle`, 'POST')
                .then(response => {
                    if (response.success) {
                        const isInWishlist = response.data.is_in_wishlist;
                        const path = wishlistIcon.querySelector('path');
                        
                        if (isInWishlist) {
                            // Add to wishlist - filled heart
                            path.setAttribute('d', 'M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z');
                            wishlistIcon.classList.add('text-red-500');
                            wishlistIcon.classList.remove('text-gray-400');
                            wishlistText.textContent = 'In Wishlist';
                            this.classList.add('bg-red-50', 'border-red-300', 'text-red-700');
                            this.classList.remove('border-gray-300', 'text-gray-700');
                        } else {
                            // Remove from wishlist - empty heart
                            path.setAttribute('d', 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z');
                            wishlistIcon.classList.remove('text-red-500');
                            wishlistIcon.classList.add('text-gray-400');
                            wishlistText.textContent = 'Add to Wishlist';
                            this.classList.remove('bg-red-50', 'border-red-300', 'text-red-700');
                            this.classList.add('border-gray-300', 'text-gray-700');
                        }
                    }
                });
        });
    }
    
    // Star Rating System
    const starButtons = document.querySelectorAll('.star-btn');
    const starButtonsLarge = document.querySelectorAll('.star-btn-large');
    let currentUserRating = {{ isset($userInteractions['rating']) ? $userInteractions['rating'] : 0 }};
    
    function handleStarRating(stars, isLarge = false) {
        stars.forEach((star, index) => {
            star.addEventListener('mouseenter', function() {
                const rating = parseInt(this.getAttribute('data-rating'));
                highlightStars(stars, rating);
            });
            
            star.addEventListener('mouseleave', function() {
                highlightStars(stars, currentUserRating);
            });
            
            star.addEventListener('click', function() {
                const rating = parseInt(this.getAttribute('data-rating'));
                
                makeAjaxRequest(`/api/books/${bookId}/rating`, 'POST', { rating: rating })
                    .then(response => {
                        if (response.success) {
                            currentUserRating = rating;
                            highlightStars(stars, rating);
                            
                            // Update the rating text
                            const ratingText = document.querySelector('#user-rating-large').nextElementSibling.querySelector('span');
                            if (ratingText) {
                                ratingText.textContent = `You rated this book ${rating} star${rating > 1 ? 's' : ''}`;
                            }
                            
                            console.log('Rating saved successfully');
                        }
                    });
            });
        });
    }
    
    function highlightStars(stars, rating) {
        stars.forEach((star, index) => {
            if (index < rating) {
                star.classList.remove('text-gray-300');
                star.classList.add('text-yellow-400');
            } else {
                star.classList.remove('text-yellow-400');
                star.classList.add('text-gray-300');
            }
        });
    }
    
    // Initialize star ratings
    if (starButtons.length > 0) {
        handleStarRating(starButtons);
        highlightStars(starButtons, currentUserRating);
    }
    
    if (starButtonsLarge.length > 0) {
        handleStarRating(starButtonsLarge, true);
        highlightStars(starButtonsLarge, currentUserRating);
    }
    
    // Write Review Form
    const writeReviewBtn = document.getElementById('write-review-btn');
    const reviewForm = document.getElementById('review-form');
    
    if (writeReviewBtn && reviewForm) {
        writeReviewBtn.addEventListener('click', function() {
            reviewForm.classList.toggle('hidden');
            if (!reviewForm.classList.contains('hidden')) {
                reviewForm.querySelector('textarea').focus();
                writeReviewBtn.textContent = 'Cancel Review';
            } else {
                writeReviewBtn.textContent = 'Write a Review';
            }
        });
        
        // Cancel button in review form
        const cancelBtn = reviewForm.querySelector('button:first-of-type');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', function() {
                reviewForm.classList.add('hidden');
                writeReviewBtn.textContent = 'Write a Review';
                reviewForm.querySelector('textarea').value = '';
            });
        }
        
        // Submit review
        const submitBtn = reviewForm.querySelector('button:last-of-type');
        const textarea = reviewForm.querySelector('textarea');
        
        if (submitBtn && textarea) {
            submitBtn.addEventListener('click', function() {
                const reviewText = textarea.value.trim();
                
                if (reviewText.length < 10) {
                    alert('Review must be at least 10 characters long');
                    return;
                }
                
                makeAjaxRequest(`/api/books/${bookId}/review`, 'POST', { 
                    review_text: reviewText,
                    is_spoiler: false 
                })
                    .then(response => {
                        if (response.success) {
                            alert('Review posted successfully!');
                            reviewForm.classList.add('hidden');
                            writeReviewBtn.textContent = 'Edit Review';
                            textarea.value = '';
                        }
                    });
            });
        }
    }
    @endauth
});
</script>
                        // Update UI if needed
                    } else {
                        console.error('Failed to update reading status:', response.message);
                        alert('Failed to update reading status. Please try again.');
                    }
                });
        });
    }
    
    // Wishlist Button
    const wishlistBtn = document.getElementById('wishlist-btn');
    const wishlistIcon = document.getElementById('wishlist-icon');
    const wishlistText = document.getElementById('wishlist-text');
    
    if (wishlistBtn) {
        wishlistBtn.addEventListener('click', function() {
            makeAjaxRequest(`/api/books/${bookId}/wishlist/toggle`, 'POST')
                .then(response => {
                    if (response.success) {
                        const isInWishlist = response.data.is_in_wishlist;
                        const path = wishlistIcon.querySelector('path');
                        
                        if (isInWishlist) {
                            // Added to wishlist
                            path.setAttribute('d', 'M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z');
                            wishlistIcon.classList.add('text-red-500');
                            wishlistIcon.classList.remove('text-gray-400');
                            wishlistText.textContent = 'In Wishlist';
                            wishlistBtn.classList.add('bg-red-50', 'border-red-300', 'text-red-700');
                            wishlistBtn.classList.remove('hover:bg-gray-50');
                        } else {
                            // Removed from wishlist
                            path.setAttribute('d', 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z');
                            wishlistIcon.classList.remove('text-red-500');
                            wishlistIcon.classList.add('text-gray-400');
                            wishlistText.textContent = 'Add to Wishlist';
                            wishlistBtn.classList.remove('bg-red-50', 'border-red-300', 'text-red-700');
                            wishlistBtn.classList.add('hover:bg-gray-50');
                        }
                    } else {
                        console.error('Failed to toggle wishlist:', response.message);
                        alert('Failed to update wishlist. Please try again.');
                    }
                });
        });
    }
    
    // Star Rating System
    const starButtons = document.querySelectorAll('.star-btn');
    const starButtonsLarge = document.querySelectorAll('.star-btn-large');
    let currentUserRating = {{ isset($userInteractions['rating']) ? $userInteractions['rating'] : 0 }};
    
    function handleStarRating(stars, isLarge = false) {
        stars.forEach((star, index) => {
            star.addEventListener('mouseenter', function() {
                const rating = parseInt(this.getAttribute('data-rating'));
                highlightStars(stars, rating);
            });
            
            star.addEventListener('mouseleave', function() {
                // Reset to current user rating
                highlightStars(stars, currentUserRating);
            });
            
            star.addEventListener('click', function() {
                const rating = parseInt(this.getAttribute('data-rating'));
                
                makeAjaxRequest(`/api/books/${bookId}/rating`, 'POST', { rating: rating })
                    .then(response => {
                        if (response.success) {
                            currentUserRating = rating;
                            highlightStars(stars, rating);
                            
                            // Update the rating text
                            const ratingText = document.querySelector('#user-rating-large').nextElementSibling.querySelector('span');
                            if (ratingText) {
                                ratingText.textContent = `You rated this book ${rating} star${rating > 1 ? 's' : ''}`;
                            }
                            
                            // Update overall rating display if present
                            updateOverallRating(response.data.average_rating, response.data.ratings_count);
                        } else {
                            console.error('Failed to save rating:', response.message);
                            alert('Failed to save rating. Please try again.');
                        }
                    });
            });
        });
    }
    
    function highlightStars(stars, rating) {
        stars.forEach((star, index) => {
            if (index < rating) {
                star.classList.remove('text-gray-300');
                star.classList.add('text-yellow-400');
            } else {
                star.classList.remove('text-yellow-400');
                star.classList.add('text-gray-300');
            }
        });
    }
    
    function updateOverallRating(averageRating, ratingsCount) {
        // Update any overall rating displays on the page
        const overallRatingElements = document.querySelectorAll('[data-overall-rating]');
        overallRatingElements.forEach(element => {
            element.textContent = `${averageRating} (${ratingsCount} ratings)`;
        });
    }
    
    if (starButtons.length > 0) {
        handleStarRating(starButtons);
    }
    
    if (starButtonsLarge.length > 0) {
        handleStarRating(starButtonsLarge, true);
        // Initialize with current rating
        highlightStars(starButtonsLarge, currentUserRating);
    }

    // Clear Rating Button
    const clearRatingBtn = document.getElementById('clear-rating-btn');
    if (clearRatingBtn) {
        clearRatingBtn.addEventListener('click', function() {
            console.log('Clear rating button clicked');
            if (confirm('Are you sure you want to clear your rating?')) {
                makeAjaxRequest(`/api/books/${bookId}/rating`, 'DELETE')
                .then(response => {
                    console.log('Clear rating response:', response);
                    if (response.success) {
                        // Update UI
                        const starButtonsLarge = document.querySelectorAll('.star-btn-large');
                        starButtonsLarge.forEach(star => {
                            star.classList.remove('text-yellow-400');
                            star.classList.add('text-gray-300');
                        });
                        
                        // Update rating status text
                        const ratingStatus = document.getElementById('rating-status');
                        if (ratingStatus) {
                            ratingStatus.textContent = 'Rate this book';
                        }
                        
                        // Hide clear button
                        clearRatingBtn.style.display = 'none';
                        
                        // Update sidebar rating section - more specific selector
                        const sidebarRatingDiv = document.querySelector('.text-center .text-sm.text-gray-600.mb-4');
                        if (sidebarRatingDiv) {
                            sidebarRatingDiv.textContent = "You haven't rated this book yet";
                        }
                        
                        alert('Rating cleared successfully!');
                    } else {
                        console.error('Failed to clear rating:', response);
                        alert('Failed to clear rating. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Clear rating error:', error);
                    alert('Error clearing rating: ' + error.message);
                });
            }
        });
    } else {
        console.log('Clear rating button not found');
    }

    // Delete Review Button
    const deleteReviewBtn = document.getElementById('delete-review-btn');
    if (deleteReviewBtn) {
        deleteReviewBtn.addEventListener('click', function() {
            console.log('Delete review button clicked');
            if (confirm('Are you sure you want to delete your review? This action cannot be undone.')) {
                makeAjaxRequest(`/api/books/${bookId}/review`, 'DELETE')
                .then(response => {
                    console.log('Delete review response:', response);
                    if (response.success) {
                        // Hide existing review display
                        const existingReview = document.getElementById('existing-review');
                        if (existingReview) {
                            existingReview.style.display = 'none';
                        }
                        
                        // Update button text
                        const writeReviewBtn = document.getElementById('write-review-btn');
                        if (writeReviewBtn) {
                            writeReviewBtn.textContent = 'Write a Review';
                        }
                        
                        // Clear review form
                        const reviewTextarea = document.getElementById('review-textarea');
                        if (reviewTextarea) {
                            reviewTextarea.value = '';
                        }
                        
                        // Update post button text
                        const postReviewBtn = document.getElementById('post-review-btn');
                        if (postReviewBtn) {
                            postReviewBtn.textContent = 'Post Review';
                        }
                        
                        alert('Review deleted successfully!');
                    } else {
                        console.error('Failed to delete review:', response);
                        alert('Failed to delete review. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Delete review error:', error);
                    alert('Error deleting review: ' + error.message);
                });
            }
        });
    } else {
        console.log('Delete review button not found');
    }

    // Enhanced Review Form Management
    const writeReviewBtn = document.getElementById('write-review-btn');
    const reviewForm = document.getElementById('review-form');
    const cancelReviewBtn = document.getElementById('cancel-review-btn');
    const postReviewBtn = document.getElementById('post-review-btn');
    const reviewTextarea = document.getElementById('review-textarea');

    if (writeReviewBtn && reviewForm) {
        writeReviewBtn.addEventListener('click', function() {
            reviewForm.classList.toggle('hidden');
            if (!reviewForm.classList.contains('hidden')) {
                reviewTextarea.focus();
            }
        });
    }

    if (cancelReviewBtn && reviewForm) {
        cancelReviewBtn.addEventListener('click', function() {
            reviewForm.classList.add('hidden');
            // Reset form if it was for new review
            if (writeReviewBtn.textContent === 'Write a Review') {
                reviewTextarea.value = '';
            }
        });
    }

    if (postReviewBtn && reviewTextarea) {
        postReviewBtn.addEventListener('click', function() {
            const reviewText = reviewTextarea.value.trim();
            
            if (reviewText.length < 10) {
                alert('Review must be at least 10 characters long.');
                return;
            }
            
            const isUpdate = writeReviewBtn.textContent === 'Edit Review';
            const method = isUpdate ? 'PUT' : 'POST';
            
            console.log(`${isUpdate ? 'Updating' : 'Creating'} review with method ${method}`);
            
            makeAjaxRequest(`/api/books/${bookId}/review`, method, {
                review_text: reviewText,
                is_spoiler: false
            })
            .then(response => {
                console.log('Review response:', response);
                if (response.success) {
                    // Hide form
                    reviewForm.classList.add('hidden');
                    
                    if (isUpdate) {
                        // Update existing review display
                        const existingReview = document.getElementById('existing-review');
                        if (existingReview) {
                            const reviewParagraph = existingReview.querySelector('p');
                            if (reviewParagraph) {
                                reviewParagraph.textContent = reviewText;
                            }
                        }
                        alert('Review updated successfully!');
                    } else {
                        // For new reviews, reload the page to show the review
                        alert('Review posted successfully!');
                        window.location.reload();
                    }
                } else {
                    console.error('Failed to save review:', response);
                    alert('Failed to save review: ' + (response.message || 'Please try again.'));
                }
            })
            .catch(error => {
                console.error('Review error:', error);
                alert('Error saving review: ' + error.message);
            });
        });
    }
});
</script>
@endsection